id,category_id,content
1,1,"What are the long-term impacts of adopting better teaching practices in computing classes?"
2,1,"What teaching practices are currently being used in computing classes?"
3,2,"Do major news stories about technology and technology companies affect enrolments?"
4,3,"What are the relative merits of using a typed vs untyped language in an introductory programming class?"
5,2,"What are the long-term benefits (if any) of people learning to program as children?"
6,4,"What kinds of problems do students in programming classes find most engaging?"
7,1,"What is the most effective way to provide feedback to students in programming classes?"
9,3,"What are the relative merits of using blocks-based tools vs textual tools for introductory programming classes?"
10,3,"What are the relative merits of using frameworks, pre-built code snippets, or skeletons in introductory programming classes?"
12,5,"Are current high school curricula meeting the needs of college or university programs and/or employers?"
13,6,"What are the merits (if any) of using gamification in programming classes?"
14,4,"What is the impact of student procrastination on performance and outcomes in introductory programming classes?"
15,5,"Is the common division of introductory courses into CS0/CS1/CS2 effective?"
17,4,"How and why do students in computing classes select the study practices they use?"
18,7,"How does programming language syntax affect accessibility for students with reading disorders?"
19,7,"How do attrition rates for different groups compare during computing programs, the transition to industry, and in professional careers?"
20,3,"What technical difficulties do teachers and schools face when trying to get IDEs and other tools installed for students?"
23,1,"What are the relative merits of videos with live coding or interactive live coding textbooks in programming classes?"
24,5,"Does teaching students specific algorithms help their understanding of algorithms and problem solving in general?"
25,8,"Do incoming students have the mathematical understanding and skills required by undergraduate Computer Science programs?"
26,5,"What competencies should people have with computers before starting to learn programming?"
27,9,"What should students in programming courses learn about computer architecture?"
28,5,"What core technical skills should students in computing courses learn?"
29,7,"What barriers to learning and retention do students from underrepresented groups face in computing?"
30,10,"How can we measure the transfer of skills and understanding for our students from one course to another?"
31,1,"What are the relative merits of instructor-led learning, exploratory learning ('Googling for it') and peer discussion in programming courses?"
32,6,"What are the relative merits of presenting tools all at once vs presenting subsets of tools in stages?"
33,9,"What are the key concepts that students need to understand in introductory computing classes?"
34,5,"To what extent do results from Computing Education research studies generalize outside of the regions in which the studies are conducted?"
35,3,"How well does the use of game-making programs in primary/secondary courses prepare students for college or university computing courses?"
36,8,"What factors best predict how successfully students will make the transition from school to industry?"
40,2,"How well do students, parents, teachers, and schools understand the difference between programming and other digital technologies?"
41,1,"What teacher actions are most likely to encourage creative thinking in computing classes?"
42,6,"What are the most effective ways to teach programming to various groups?"
43,7,"What influences girls' decisions to take primary/secondary computing classes?"
44,9,"How do students acquire and develop program comprehension skills?"
45,7,"What are the most effective ways to develop computing competency among students in non-computing disciplines?"
46,8,"What are the relative effects on retention of first exposure to computing through maker spaces, coding clubs, etc. vs structured classroom contexts?"
47,6,"What are the relative merits of teaching higher-level courses on data structures and algorithms with and without practical labs?"
49,9,"What are students' most common misconceptions about how programs operate?"
50,11,"(How) can we make it easier for teachers to create, revise, share, evaluate, find and get credit for teaching materials?"
51,7,"(How) can we encourage people without formal Computer Science training or backgrounds to contribute to open source projects?"
52,8,"What development practices used by professional programmers are most important to teach to students?"
53,2,"(How) can learning programming concepts assist learning in other areas?"
54,5,"What are the relative merits of teaching functional programming first vs teaching imperative programming first?"
55,7,"What are the proportions of computing students who identify as male vs those who identify as female?"
56,5,"How do the content and teaching methods of informal computing education compare to those of formal computing education?"
57,8,"How well does someone's ability to pattern match correlate with their performance in their first programming course?"
58,11,"What pedagogic theories are used (explicitly or tacitly) by computing instructors?"
60,8,"What factors best predict how successfully students will make the transition from school to industry?"
61,5,"What effect does the use of unit testing in a first programming course have on students' ability to build correct programs?"
63,8,"What effect does participation in out-of-school coding camps and similar activities have on students' attitudes toward in-school computing classes they subsequently encounter?"
66,7,"What are the most effective ways to teach introductory computing to students without prior programming knowledge?"
67,1,"(How) do formal curricular goals support the development of programming skills and computational thinking in students?"
69,9,"What do we need to teach students so that they can transfer skills and understanding from one language to another?"
70,3,"What are the impacts of teaching specific languages on students' understanding of Computer Science concepts?"
71,3,"How does the use of Unicode variable names (i.e., mathematical symbols) affect error rates in students' programs?"
72,7,"How likely are students from underrepresented groups to ask a question in class compared to students from majority groups?"
73,11,"How can teachers be trained or recruited in order to be inspirational and effective?"
74,5,"How useful is it for students to learn about older computing technologies?"
76,8,"What is the impact of students' literacy skills on their success in programming (both in school and beyond)?"
77,9,"What fundamental programming concepts are the most challenging for students?"
78,8,"What impact does early exposure to security topics and tools have on student retention and/or comprehension in Computer Science programs?"
80,1,"(How) does the best teaching method or language depend on the learner's personality or other characteristics?"
81,6,"How can we teach students how to deconstruct programming problems?"
82,5,"To what extent should lessons and practices from industry influence the way we teach programming?"
83,5,"What computing skills or knowledge are the best predictors of student success?"
84,9,"(How) can we help technically-oriented students value human-centered aspects of computing?"
88,10,"What impact does learning to program have on students' competence in mathematics?"
89,3,"What languages are most effective for teaching children?"
90,5,"What resources can computing teachers use that are not language specific?"
91,4,"What benefits do social aspects of classes (e.g., collaboration) have on novice programmers?"
92,7,"How effective are combination programs (e.g., math + CS) at attracting students from underrepresented groups?"
93,6,"What is the impact of teaching computing concepts 'unplugged' (i.e., without programming) alongside teaching programming?"
95,9,"What do people find most difficult when breaking problems down into smaller tasks while programming?"
98,1,"How does the effectiveness of short, condensed courses compare to that of longer, less intensive courses?"
99,7,"What role does family background play in students' decisions to take (or not take) computing classes?"
100,1,"What are the relative merits of teaching top down (high-level concepts first) vs bottom up (concrete operations first)?"
101,10,"Is it possible to predict how well someone will do in their first programming course if they have never programmed before?"
103,1,"What are the relative merits of teaching computing concepts breadth first vs depth first?"
104,4,"Does planning a program using pseudocode or flowcharts before starting to code improve students' outcomes?"
105,10,"What types of pre-classroom preparation are most effective at getting students ready to learn Computer Science?"
106,8,"What impact does taking a computing course in primary/secondary school have on students' decisions to take or not take computing at college or university?"
107,7,"What are the best teaching strategies to use in computing classes for students with physical disabilities?"
108,3,"Are game-based tools like Unity and GameMaker effective for developing programming skills after block-based tools like Scratch but before text-based tools like Python?"
112,6,"What are best practices for instruction in a computer lab?"
113,5,"What is the minimum amount of time that needs to be devoted to introducing non-Computer Science students to programming in order for it to be useful?"
115,5,"What are the relative merits of teaching object-oriented programming first vs teaching imperative programming first?"
116,4,"What events or activities first make students self-identify as programmers?"
117,3,"What are the relative merits of sticking to one programming language when teaching children vs using two or more languages?"
118,8,"What are the most useful things high school teachers can do to help students succeed in computing careers (both in academia and industry)?"
122,6,"What kinds of programming exercises are most effective when teaching students Computer Science?"
123,1,"What practices are most effective when teaching programming in very large classes (hundreds of students)?"
124,10,"How can an instructor tell whether students are actually reflecting on their work?"
125,1,"To what extent, and how, should self-directed learning be used to complement in-person teaching in computing?"
126,1,"What teaching methods or curriculum are most effective at persuading students in other disciplines to incorporate programming into their work?"
127,8,"What knowledge and skills are new graduates of computing programs most often missing that they need?"
128,3,"What languages or tools are most effective for introducing object-oriented programming?"
129,6,"What computing concepts and skills can young children (up to 7/8) actually learn?"
130,10,"What are the most effective ways to monitor and track students' work in computing classes?"
131,4,"Why do so few students take computing classes in high school?"
132,6,"What are effective methods for teaching students to develop algorithms prior to beginning coding?"
134,11,"What types of training for TAs are most effective?"
135,3,"How easily can students transition from the 2D model of turtle graphics used in Scratch, Logo, and similar systems to thinking in 3D?"
136,10,"How well does someone's 'grit' predict how well they will do in their first programming course if they have never programmed before?"
137,7,"What can teachers do to improve participation by underrepresented groups in computing?"
138,4,"What steps are most likely to reduce drop rates in online computing courses?"
139,3,"What impact does learning block-based tools like Scratch have on subsequently learning text-based tools like Python?"
141,3,"How easily can students switch between different programming languages while learning?"
142,6,"What teaching practices are most effective for teaching computing to children?"
143,4,"What factors most influence drop rates in introductory computing classes and (how) do these factors vary according to student demographics (age, gender, orientation, etc.)"
144,9,"Why do some students believe that software development is solely a matter of programming?"
146,7,"What is the relationship between student demographics (age, gender, orientation, etc.) and their understanding of fundamental computing concepts?"
147,8,"What do students learn in college or university computing programs that they consider most valuable two years after graduation?"
148,5,"How important is it for students to have a general understanding of how computers work before learning programming concepts?"
150,6,"How can we improve computational thinking skills in high school students?"
151,5,"What is the effect of work load and pacing on motivation and retention in introductory computing courses?"
152,4,"When and why do students ask for help in labs, and are such questions a sign that things are going well or not?"
153,11,"How is 'good quality software' defined for computing teachers and how does this compare to the way that professionals define it?"
154,1,"(How) do student demographics (age, gender, orientation, etc.) determine the effectiveness of different teaching methods?"
155,6,"To what extent is learning to program like learning to speak a language?"
156,8,"How well can students who have gone through Computer Science programs adapt to changing market needs?"
157,5,"Should databases be taught at the high school level?"
159,6,"What content and teaching methods are most effective at helping students learn how to design software?"
160,3,"(How) do online/automated grading systems for programming affect learning outcomes?"
162,6,"How effective are pair programming and peer review in introductory computing courses?"
163,5,"Should students learn Unix commands and basic shell scripting before or after learning a more general purpose programming language?"
164,8,"Why do students enrol in computing programs?"
165,6,"What is the most effective way to introduce the notion of a variable in computing classes?"
166,8,"What language is it most useful for a college- or university-bound student to learn?"
168,9,"(How) can we convince students that documentation is important, particularly when they may not continue in computing?"
171,4,"(How) can teachers convince students who believe they just don't get computing that they can do it?"
172,10,"How well does participation in non-programming activities (course attendance, reading, discussion) predict outcomes in programming courses?"
173,10,"How do differences in the way instructors understand software development projects affect the way students learn good software development practices?"
174,6,"What are the relative merits of teaching the mechanics of specific systems vs teaching high-level principles in higher-level topics such as databases and networks?"
175,10,"How well do standardized secondary school examinations predict how students will do in their first college- or university-level programming course?"
176,11,"How effective is it to retrain high school teachers from other disciplines to teach computing?"
177,4,"What online resources do learners most frequently consult when learning to program?"
178,9,"What are the differences between the way experts program and the way students program?"
179,11,"What are effective methods for 'training the trainers', i.e., for teaching people how to teach others to teach computing?"
180,10,"What relationship is there between student performance in computing and student performance in other subjects?"
182,10,"What effect does teaching students computing and computational thinking in primary school have on their performance in high school?"
183,3,"What impact does choice of teaching language have on how much students learn about fundamental computing concepts?"
184,2,"Is it important for students to learn programming and digital technologies?"
185,3,"What is the best language to use when teaching introductory programming courses?"
186,4,"How does a sense of self-efficacy influence students' success outside of their courses?"
187,9,"What impact does teaching introductory courses using only data analysis/machine learning examples have on student understanding?"
188,2,"What programming experiences do people most often have before attending their first programming workshop?"
190,8,"What impact (if any) does the language learned in secondary school have on students' conceptual understanding of computing at college or university?"
191,5,"What are the relative merits of teaching children logic vs teaching them programming?"
192,4,"Why do students take Computer Science classes at college or university?"
195,8,"How many students are retained in each level of a typical college or university computing program?"
196,4,"What features of classes, students, or pedagogy most affect attendance, engagement, and performance?"
198,5,"What is the best order in which to introduce control flow (e.g., loops) and functions?"
199,1,"What are the merits (if any) of using large projects in class when teaching computing?"
200,5,"What are the most important things that students finishing college or university computing programs still don't understand?"
201,8,"What topics in computing are going to be more important for students to learn in the near future?"
204,5,"What is the best order in which to teach basic computing concepts and skills?"
206,9,"What incorrect mental models do students bring to their first computing courses?"
207,1,"Does growth mindset instruction alter outcomes in computing courses?"
209,11,"(How) can teachers avoid burnout in the face of rising enrolments without compromising quality of instruction?"
210,9,"Does learning programming involve mental barriers that do not exist in other subjects?"
211,5,"How do colleges/universities justify their choice of their introductory programming language?"
213,11,"Why do some teachers believe that some students 'get it' and some don't when it comes to programming?"
216,1,"What teaching strategies are most effective when dealing with a wide range of prior experience in introductory programming classes?"
217,10,"What is the relationship between student demographics (age, gender, orientation, etc.) and prior experience and their success in introductory college or university computing classes?"
221,3,"What is the best hardware (such as programmable boards and robots) to use for introductory computing classes?"
222,8,"What is the best age (if any) at which to start teaching children a text-based programming language?"
223,8,"What should I tell students who have impostor syndrome or self-doubt after hearing companies say that they only want the best of the best?"
224,10,"Do exams taken on a computer measure learning more accurately than written exams?"
225,4,"Do students' attitudes toward making mistakes predict how much they will enjoy computing courses and/or how well they will do in them?"
226,9,"Is there such a thing as 'computational thinking'?"
227,4,"How can we motivate students in computing classes to attend class, do assigned readings, and participate in exercises?"
228,10,"To what extent is being technically proficient in using a computer helpful to learning Computer Science?"
229,7,"How do students with hearing disabilities learn computing?"
230,1,"What methods for teaching problem solving skills are most effective for different age groups?"
233,10,"Is it possible to predict how well someone will do as a computing professional before they enrol in a college or university computing program?"
235,1,"How do students respond to open-ended exercises in programming courses?"
238,2,"Will programming ever be regarded as being as important to learn as reading, writing, or arithmetic?"
239,8,"What knowledge and skills are new entrants into computing programs most often missing that they need?"
240,2,"Can we/should we integrate computing or computational thinking into the entire high school curriculum?"
242,6,"What are the most effective ways to teach people how to program?"
243,7,"Do early outreach activities influence girls' decision to enter computing?"
245,3,"What effect (if any) does choice of first language have on the degree to which students can transfer understanding to programming in other languages?"
246,3,"What is the most effective way to move students from block-based programming to text-based programming?"
248,11,"What are the most important things for teachers to know about computing education research in order to collaborate effectively with researchers?"
251,3,"How do teachers and schools select the programming languages they teach?"
253,5,"What are the benefits (if any) of teaching computing concepts across various subjects rather than concentrating them in a dedicated computing course?"
256,10,"Are students who are required to write detailed documentation for code better able to reason about it?"
257,6,"Is learning computing fundamentally different in any way from learning other subjects?"
258,7,"Is proportional representation of women and other groups currently underrepresented in computing achievable?"
260,8,"To what extent if any are (potential) students confused by the number of options available to them for learning computing?"
261,6,"Is explicit discussion of abstract concepts such as patterns or debugging helpful when teaching novices to program?"
262,6,"How effective are online courses in teaching general programming skills to high school students?"
263,7,"What are the best ways to teach fundamental programming concepts and skills to learners coming from low tech/low computer literacy backgrounds?"
268,6,"Are recursive functions best taught and understood using proof rules (such as induction) or hand simulation?"
269,5,"How does being taught for-each loops first affect a student's ability to later learn to write indexed loops?"
270,10,"(How) can we predict which of the skills we teach students they will then go on to use?"
271,5,"Should topics such as databases, networking, and operating systems be taught in specialized courses, or should that content be merged into more wide-ranging courses?"
272,7,"What can schools and teachers do to increase the chances of success for students in their first college or university computing course?"
273,1,"How much do students learn from lectures vs how much do they learn from practical work such as programming assignments?"
274,6,"(How) does the best way to teach programming depend on the language being used?"
275,2,"Is there a best age at which to start learning how to program?"
276,1,"What is the best balance between lectures and lab work?"
277,5,"What content from general introductory computing courses is most relevant to students taking more advanced courses in topics such as networking and computer architecture?"
279,2,"How important do students who are not already in computing programs believe it is to learn a programming language?"
280,3,"Is it possible to design programming languages that are significantly easier to learn than the ones in use today?"
282,8,"What do colleges/universities look for in students applying to enter computing programs?"
283,6,"To what extent does frequent help from instructors and TAs help students who are struggling to master material in computing courses?"
286,5,"How important is it to teach compiled programming languages?"
288,8,"How can we best involve students in computing education research?"
291,3,"What are the best ways to make documentation about libraries and APIs accessible to students?"
292,3,"What are the relative merits of using computational notebooks (like Jupyter) vs teaching the same languages and content using traditional text formats?"
295,8,"How can we help students connect what they have learned in class with what they encounter in the workplace?"
296,2,"Are different regions taking different approaches to computing education?"
297,2,"What factors have led to the increase in the number of students taking computing courses in the past few years?"
299,11,"How can we better connect subject matter experts who lack teaching expertise with experts in teaching who lack in-depth computing knowledge?"
300,6,"What are the most effective ways to scale computing education to reach the general student population?"
301,6,"What is the most effective way to teach algorithms in computing courses?"
302,10,"What are the benefits (if any) of having a mathematics prerequisite to an introductory computing course?"
303,6,"What are the best ways to teach programming to people with no previous programming experience?"
304,5,"When should students learn how to install software, manage paths and environments, etc.?"
306,6,"What is the most effective way to teach students how to test software?"
307,5,"How do teaching approaches differ between Computer Science, Information Technology, and related disciplines?"
310,3,"What is the best balance between using modern software development tools and overloading students?"
311,10,"What factors in primary/secondary education best predict success for students in college or university computing and beyond?"
312,3,"How effective are game development tools like Unity for teaching computing vs conventional languages like Python?"
313,11,"What factors inspire high school Computer Science teachers, increase their confidence, and lower attrition rates?"
314,5,"What concepts are taught in college or university computing programs?"
316,7,"Has the uptake of for-profit STEM-oriented daycare and camps by middle-class families affected access to computing programs for students from less affluent backgrounds?"
317,11,"What is the single most effective change Computer Science departments could make to their teaching practices?"
318,6,"Do data diagrams help students understand language features and code execution?"
319,9,"How often do students have 'ah ha' moments in computing courses in which things suddenly start to make sense?"
321,1,"How can we help students become comfortable with failure in computing courses?"
322,2,"What factors have led to differences in the implementation of computing in secondary education in different regions?"
324,6,"What is the best way to use extended programming tasks in large computing courses?"
325,2,"What do high school students think Computer Science is?"
326,6,"What are the most effective ways to teach data structures?"
327,3,"Do tools like Alice help students understand object-oriented programming concepts in CS2?"
328,1,"Can some teaching practices make a difference to students' ability to write programs, or is learning to program primarily a matter of practice?"
329,9,"To what degree are students able to attain higher levels of understanding (as per Bloom's Taxonomy) in computing programs?"
331,6,"What teaching methods best help students remember the syntax of programming languages?"
336,7,"Is programming ability an intrinsic attribute, or can anyone become proficient at programming?"
338,3,"What are the best tools to use when teaching people how to program on smart phones?"
339,11,"How can we recruit more external (industry) partners to collaborate on classroom programming projects?"
340,11,"How can teachers stay up to date with changes to technology and programming practices?"
341,9,"What topics in computing are most difficult for high school students to grasp?"
342,8,"Is it more beneficial for new graduates of computing programs to have strong individual skills or strong team skills?"
349,6,"When and how is it best to present advanced computing techniques to students who are new to programming?"
351,6,"How and when is it best to give students feedback on their code to improve learning?"
352,8,"To what extent do people continue to program after moving into management positions?"
354,9,"Which student misconceptions about computing are most difficult to correct?"
355,6,"What are best practices for using computers in computing classes?"
356,8,"What topics or skills can be taught to primary/secondary students to best prepare them to learn or appreciate computing at college or university?"
357,1,"What are the relative merits of project-based learning, lecturing, and active learning for students learning computing?"
358,6,"What are the relative benefits of live coding vs presentations or guided exercises?"
359,4,"What are the most effective ways to keep diverse groups of students engaged when teaching computing?"
360,9,"What misconceptions do students have about operating systems?"
364,5,"What is the best balance between theory and hands-on practice in a computing program?"
365,2,"Do students have an accurate understanding of the time and effort required to learn programming?"
370,5,"What is the most effective way to teach digital technologies in high schools without diluting content?"
371,7,"Do female students learn computing more effectively in all-female classes?"
372,6,"What is the most effective way to teach control structures such as loops to students who are not computing majors?"
374,3,"What are the relative benefits of provisioning a computing environment for students vs requiring them to manage installation issues themselves?"
377,11,"What technical difficulties do teachers trying to use new tools or applications encounter?"
378,6,"Can student learning be enhanced by explicit lessons on how to use Stack Overflow and similar online forums?"
379,9,"At what developmental stage can people first effectively use 'variable' as an abstraction?"
380,6,"What are the characteristics of good homework assignments in computing classes?"
381,5,"What are the most effective ways for teachers to keep course materials up to date?"
382,4,"To what extent are 'free riders' actually a problem in group computing projects?"
383,8,"To what degree do different fields of graduate student require or rely on computing skills?"
384,6,"Does explicit reference to a programming language the student already knows help or hinder learning a second language?"
385,5,"What is the best way to integrate data management practices into a computing curriculum?"
386,8,"What can be done in high schools to close the gap between the supply of programmers and the demand for them?"
387,3,"If students have multiple courses using the same language, do they benefit more from using the same tools or from using a variety of tools?"
390,3,"What are the relative benefits of giving students standard hardware vs having them bring their own devices?"
391,10,"To what extent (if any) does the choice of first programming language affect students' interest in pursuing more programming courses?"
392,8,"How do the long-term career prospects for participants in coding bootcamps compare to those of students taking part in traditional classroom computing programs?"
394,4,"What can be done in class to motivate students to use good software engineering practices on larger projects?"
396,9,"Is 'expression' a threshold concept?"
397,9,"What affects students' ability to generalize from simple programming examples?"
398,7,"To what extent (if any) does the impact of using block-based programming in introductory courses vary according to student demographics (age, gender, orientation, etc.)?"
399,6,"How do learning outcomes differ when students use their own code and/or data in programming classes vs using code and/or data provided by the instructor?"
400,2,"What can teachers do to ensure adequate funding for computing classes?"
